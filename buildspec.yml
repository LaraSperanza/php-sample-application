version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      # Variables de entorno $AWS_ACCOUNT_ID y $AWS_DEFAULT_REGION son proveídas por CodeBuild
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # Usamos el nombre de tu repositorio ECR para el frontend
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/php-sample-app
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:-latest}

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      # Construye la imagen usando el Dockerfile modificado
      - docker build -t $REPOSITORY_URI:latest .
      # Taguea la imagen con el hash del commit (Req. 4)
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images to ECR...
      # Sube ambas etiquetas a ECR
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      
      # (ESTA ES LA PARTE CLAVE PARA EL DEPLOY)
      # Crea el artefacto de salida que CodePipeline le pasará a ECS.
      # Le dice a ECS qué contenedor actualizar y con qué imagen nueva.
      
      # ¡IMPORTANTE! El "name" ("php-app-container") debe coincidir EXACTAMENTE
      # con el "name" del contenedor que definiremos en la Task Definition del frontend.
      - printf '[{"name":"php-app-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

# Define el artefacto de salida que CodePipeline recogerá
artifacts:
  files: imagedefinitions.json